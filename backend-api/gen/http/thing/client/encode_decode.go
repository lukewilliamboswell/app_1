// Code generated by goa v3.1.2, DO NOT EDIT.
//
// thing HTTP client encoders and decoders
//
// Command:
// $ goa gen backend-api/design

package client

import (
	thing "backend-api/gen/thing"
	thingviews "backend-api/gen/thing/views"
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "thing" service "list" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListThingPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("thing", "list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListResponse returns a decoder for responses returned by the thing
// list endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("thing", "list", err)
			}
			p := NewListStoredThingCollectionOK(body)
			view := "tiny"
			vres := thingviews.StoredThingCollection{Projected: p, View: view}
			if err = thingviews.ValidateStoredThingCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("thing", "list", err)
			}
			res := thing.NewStoredThingCollection(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("thing", "list", resp.StatusCode, string(body))
		}
	}
}

// unmarshalStoredThingResponseToThingviewsStoredThingView builds a value of
// type *thingviews.StoredThingView from a value of type *StoredThingResponse.
func unmarshalStoredThingResponseToThingviewsStoredThingView(v *StoredThingResponse) *thingviews.StoredThingView {
	res := &thingviews.StoredThingView{
		ID:   v.ID,
		Name: v.Name,
	}
	if v.Features != nil {
		res.Features = make([]string, len(v.Features))
		for i, val := range v.Features {
			res.Features[i] = val
		}
	}

	return res
}
