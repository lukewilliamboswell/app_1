// Code generated by goa v3.1.2, DO NOT EDIT.
//
// thing HTTP client types
//
// Command:
// $ goa gen backend-api/design

package client

import (
	thingviews "backend-api/gen/thing/views"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// ListResponseBody is the type of the "thing" service "list" endpoint HTTP
// response body.
type ListResponseBody []*StoredThingResponse

// StoredThingResponse is used to define fields on response body types.
type StoredThingResponse struct {
	ID *uint64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of Thing
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Features of Thing
	Features []string `form:"features,omitempty" json:"features,omitempty" xml:"features,omitempty"`
}

// NewListStoredThingCollectionOK builds a "thing" service "list" endpoint
// result from a HTTP "OK" response.
func NewListStoredThingCollectionOK(body ListResponseBody) thingviews.StoredThingCollectionView {
	v := make([]*thingviews.StoredThingView, len(body))
	for i, val := range body {
		v[i] = unmarshalStoredThingResponseToThingviewsStoredThingView(val)
	}
	return v
}

// ValidateStoredThingResponse runs the validations defined on
// StoredThingResponse
func ValidateStoredThingResponse(body *StoredThingResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 100, false))
		}
	}
	return
}
