// Code generated by goa v3.1.2, DO NOT EDIT.
//
// thing service
//
// Command:
// $ goa gen backend-api/design

package thing

import (
	thingviews "backend-api/gen/thing/views"
	"context"
)

// Gets all the things out of the DB
type Service interface {
	// List implements list.
	List(context.Context) (res StoredThingCollection, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "thing"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"list"}

// StoredThingCollection is the result type of the thing service list method.
type StoredThingCollection []*StoredThing

type StoredThing struct {
	ID uint64
	// Name of Thing
	Name string
	// Features of Thing
	Features []string
}

// NewStoredThingCollection initializes result type StoredThingCollection from
// viewed result type StoredThingCollection.
func NewStoredThingCollection(vres thingviews.StoredThingCollection) StoredThingCollection {
	var res StoredThingCollection
	switch vres.View {
	case "tiny":
		res = newStoredThingCollectionTiny(vres.Projected)
	case "default", "":
		res = newStoredThingCollection(vres.Projected)
	}
	return res
}

// NewViewedStoredThingCollection initializes viewed result type
// StoredThingCollection from result type StoredThingCollection using the given
// view.
func NewViewedStoredThingCollection(res StoredThingCollection, view string) thingviews.StoredThingCollection {
	var vres thingviews.StoredThingCollection
	switch view {
	case "tiny":
		p := newStoredThingCollectionViewTiny(res)
		vres = thingviews.StoredThingCollection{Projected: p, View: "tiny"}
	case "default", "":
		p := newStoredThingCollectionView(res)
		vres = thingviews.StoredThingCollection{Projected: p, View: "default"}
	}
	return vres
}

// newStoredThingCollectionTiny converts projected type StoredThingCollection
// to service type StoredThingCollection.
func newStoredThingCollectionTiny(vres thingviews.StoredThingCollectionView) StoredThingCollection {
	res := make(StoredThingCollection, len(vres))
	for i, n := range vres {
		res[i] = newStoredThingTiny(n)
	}
	return res
}

// newStoredThingCollection converts projected type StoredThingCollection to
// service type StoredThingCollection.
func newStoredThingCollection(vres thingviews.StoredThingCollectionView) StoredThingCollection {
	res := make(StoredThingCollection, len(vres))
	for i, n := range vres {
		res[i] = newStoredThing(n)
	}
	return res
}

// newStoredThingCollectionViewTiny projects result type StoredThingCollection
// to projected type StoredThingCollectionView using the "tiny" view.
func newStoredThingCollectionViewTiny(res StoredThingCollection) thingviews.StoredThingCollectionView {
	vres := make(thingviews.StoredThingCollectionView, len(res))
	for i, n := range res {
		vres[i] = newStoredThingViewTiny(n)
	}
	return vres
}

// newStoredThingCollectionView projects result type StoredThingCollection to
// projected type StoredThingCollectionView using the "default" view.
func newStoredThingCollectionView(res StoredThingCollection) thingviews.StoredThingCollectionView {
	vres := make(thingviews.StoredThingCollectionView, len(res))
	for i, n := range res {
		vres[i] = newStoredThingView(n)
	}
	return vres
}

// newStoredThingTiny converts projected type StoredThing to service type
// StoredThing.
func newStoredThingTiny(vres *thingviews.StoredThingView) *StoredThing {
	res := &StoredThing{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	return res
}

// newStoredThing converts projected type StoredThing to service type
// StoredThing.
func newStoredThing(vres *thingviews.StoredThingView) *StoredThing {
	res := &StoredThing{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Features != nil {
		res.Features = make([]string, len(vres.Features))
		for i, val := range vres.Features {
			res.Features[i] = val
		}
	}
	return res
}

// newStoredThingViewTiny projects result type StoredThing to projected type
// StoredThingView using the "tiny" view.
func newStoredThingViewTiny(res *StoredThing) *thingviews.StoredThingView {
	vres := &thingviews.StoredThingView{
		ID:   &res.ID,
		Name: &res.Name,
	}
	return vres
}

// newStoredThingView projects result type StoredThing to projected type
// StoredThingView using the "default" view.
func newStoredThingView(res *StoredThing) *thingviews.StoredThingView {
	vres := &thingviews.StoredThingView{
		ID:   &res.ID,
		Name: &res.Name,
	}
	if res.Features != nil {
		vres.Features = make([]string, len(res.Features))
		for i, val := range res.Features {
			vres.Features[i] = val
		}
	}
	return vres
}
